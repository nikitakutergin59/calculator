package crar

import (
	"fmt"
	"math"
	"sort"
	"strconv"
	"strings"
)

// —Å—Ä–µ–¥–Ω–µ–µ –∞—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫–æ–µ, –¥–∏—Å–ø–µ—Ä—Å–∏—è,
func cr_ar(array []float64) (float64, float64, float64) {
	sum := 0.0
	no_sum := float64(len(array))
	for i := 0; i < len(array); i++ {
		sum += array[i]
	}
	cRaR := sum / no_sum

	sum_sq_diff := 0.0
	for i := 0; i < len(array); i++ {
		diff := array[i] - cRaR
		sum_sq_diff += diff * diff
	}
	variance := sum_sq_diff / no_sum
	SqrtVariance := math.Sqrt(variance)
	return cRaR, variance, SqrtVariance
}

// –Ω–∞–∏–º–µ–Ω—å—à–µ–µ –Ω–∞–∏–±–æ–ª—å—à–µ–µ, —Ä–∞–∑–º–∞—Ö
type Stats struct {
	Max    float64
	Min    float64
	Razmax float64
}

func maXmiN(array []float64) Stats {
	Max := array[0]
	Min := array[0]
	for i := 0; i < len(array); i++ {
		if array[i] > Max {
			Max = array[i]
		} else if array[i] < Min {
			Min = array[i]
		}
	}
	razmax := Max - Min
	return Stats{Max, Min, razmax}
}

func Median(array []float64) float64 {
	NewArray := make([]float64, len(array))
	copy(NewArray, array) // –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é, —á—Ç–æ–±—ã –Ω–µ –º–µ–Ω—è—Ç—å –∏—Å—Ö–æ–¥–Ω—ã–π –º–∞—Å—Å–∏–≤
	sort.Float64s(NewArray)
	if len(NewArray)%2 != 0 {
		return NewArray[len(NewArray)/2]
	} else {
		left_central_element := NewArray[len(NewArray)/2-1]
		right_central_element := NewArray[len(NewArray)/2]
		return (left_central_element + right_central_element) / 2
	}
}

// —Å—Ä–µ–¥–Ω–µ–µ –∞—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫–æ–µ
func CrArMaxMinValue(s string) {
	// –†–∞–∑–±–∏–≤–∞–µ–º —Å—Ç—Ä–æ–∫—É –ø–æ –∑–∞–ø—è—Ç—ã–º
	nambers := strings.Split(s, ",")
	// –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –º–∞—Å—Å–∏–≤–∞ –≤ —á–∏—Å–ª–∞
	var m []float64
	for _, numStr := range nambers {
		num, err := strconv.ParseFloat(strings.TrimSpace(numStr), 64) // –£–¥–∞–ª—è–µ–º –ø—Ä–æ–±–µ–ª—ã –∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —á–∏—Å–ª–æ
		if err != nil {
			fmt.Println("–æ—à–∏–±–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è:", err)
			return
		}
		m = append(m, num)
	}
	fmt.Println("–í–∞—à —Å–ø–∏—Å–æ–∫:", m) // –í—ã–≤–æ–¥–∏–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –º–∞—Å—Å–∏–≤
	// —Å—á–∏—Ç–∞–µ–º —Å–∫–æ–ª—å–∫–æ —á–∏—Å–µ–ª –≤ —Å–ø–∏—Å–∫–µ
	value := 0.0
	for _, char := range s {
		if char == ',' {
			value++
		}
	}
	fmt.Println("–ö–æ–ª-–≤–æ —á–∏—Å–µ–ª –≤ —Å–ø–∏—Å–∫–µ:", int(value)+1)

	//—Å—Ä–µ–¥–Ω–µ–µ –∞—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫–æ–µ –∏ –¥–∏—Å–ø–µ—Ä—Å–∏—è
	average, variance, SqrtVariance := cr_ar(m)
	// –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å–ª–∏ —É —Å—Ä–µ–¥–Ω–µ–≥–æ –±–æ–ª–µ–µ 2 –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
	if average-float64(int(average)) != 0 { // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥—Ä–æ–±–Ω–∞—è —á–∞—Å—Ç—å
		roundedResult_1 := strconv.FormatFloat(average, 'f', 3, 64)
		fmt.Println("–°—Ä–µ–¥–Ω–µ–µ –∞—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫–æ–µ:", roundedResult_1)
	} else {
		fmt.Println("–°—Ä–µ–¥–Ω–µ–µ –∞—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫–æ–µ:", average)
	}
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –¥–∏—Å–ø–µ—Ä—Å–∏–∏ –±–æ–ª–µ–µ 2 –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
	if variance-float64(int(variance)) != 0 { // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥—Ä–æ–±–Ω–∞—è —á–∞—Å—Ç—å
		roundedResult_2 := strconv.FormatFloat(variance, 'f', 3, 64)
		fmt.Println("–î–∏—Å–ø–µ—Ä—Å–∏—è:", roundedResult_2)
	} else {
		fmt.Println("–î–∏—Å–ø–µ—Ä—Å–∏—è:", variance)
	}
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —É —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –±–æ–ª–µ–µ 2 –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
	if SqrtVariance-float64(int(SqrtVariance)) != 0 { // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –¥—Ä–æ–±–Ω–∞—è —á–∞—Å—Ç—å
		roundResult_3 := strconv.FormatFloat(SqrtVariance, 'f', 3, 64)
		fmt.Println("–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ:", roundResult_3)
	} else {
		fmt.Println("–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ:", SqrtVariance)
	}
	// –ú–æ–¥–∞ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ —á–∏—Å–µ–ª
	result_1 := Median(m)
	if len(m)%2 != 0 {
		fmt.Println("–ú–µ–¥–∏–∞–Ω–∞(–Ω–µ—á—ë—Ç–Ω–æ–≥–æ –∫–æ–ª-–≤–æ –µ–ª–µ–º–µ–Ω—Ç–æ–≤):", result_1)
	} else {
		fmt.Println("–ú–µ–¥–∏–∞–Ω–∞(—á—ë—Ç–Ω–æ–≥–æ –∫–æ–ª-–≤–æ –µ–ª–µ–º–µ–Ω—Ç–æ–≤):", result_1)
	}

	// –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞, —Ä–∞–∑–º–∞—Ö –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
	result := maXmiN(m)
	if result.Razmax > result.Min {
		str := fmt.Sprintf("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ: %v; –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ: %v; –†–∞–∑–º–∞—Ö: %v, üëé–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–π", result.Max, result.Min, result.Razmax)
		fmt.Println(str)
	} else if result.Razmax == 0 {
		str := fmt.Sprintf("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ: %v; –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ: %v; –†–∞–∑–º–∞—Ö: %v", result.Max, result.Min, result.Razmax)
		fmt.Println(str)
	} else if result.Razmax == result.Min {
		str := fmt.Sprintf("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ: %v; –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ: %v; –†–∞–∑–º–∞—Ö: %v, üëç–Ω–æ—Ä–º–∞–ª—å–Ω—ã–π", result.Max, result.Min, result.Razmax)
		fmt.Println(str)
	} else {
		str := fmt.Sprintf("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ: %v; –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ: %v; –†–∞–∑–º–∞—Ö: %v, üëç–Ω–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–π", result.Max, result.Min, result.Razmax)
		fmt.Println(str)
	}
}
